#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤
const publicDir = path.join(process.cwd(), 'public');
const logosDir = path.join(publicDir, 'generated-logos');

console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤...');
console.log('Current directory:', process.cwd());
console.log('Public directory:', publicDir);
console.log('Logos directory:', logosDir);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ public
if (!fs.existsSync(publicDir)) {
  console.error('‚ùå –ü–∞–ø–∫–∞ public –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
  process.exit(1);
} else {
  console.log('‚úÖ –ü–∞–ø–∫–∞ public —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É generated-logos
if (!fs.existsSync(logosDir)) {
  console.log('‚ö†Ô∏è  –ü–∞–ø–∫–∞ generated-logos –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...');
  try {
    fs.mkdirSync(logosDir, { recursive: true });
    console.log('‚úÖ –ü–∞–ø–∫–∞ generated-logos —Å–æ–∑–¥–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏:', error.message);
    process.exit(1);
  }
} else {
  console.log('‚úÖ –ü–∞–ø–∫–∞ generated-logos —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
try {
  const testFile = path.join(logosDir, 'test.txt');
  fs.writeFileSync(testFile, 'test');
  fs.unlinkSync(testFile);
  console.log('‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É generated-logos –µ—Å—Ç—å');
} catch (error) {
  console.error('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É generated-logos:', error.message);
  process.exit(1);
}

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
const files = fs.readdirSync(logosDir);
console.log(`üìÅ –§–∞–π–ª–æ–≤ –≤ generated-logos: ${files.length}`);
if (files.length > 0) {
  console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ñ–∞–π–ª–æ–≤:');
  files.slice(-5).forEach(file => {
    const filePath = path.join(logosDir, file);
    const stats = fs.statSync(filePath);
    console.log(`  - ${file} (${Math.round(stats.size / 1024)}KB, ${stats.mtime.toISOString()})`);
  });
}

console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');